-- Set offset to earliest
SET 'auto.offset.reset' = 'earliest';

-- Create dishes KTable
CREATE TABLE DISHES (
    dish_id VARCHAR PRIMARY KEY
) WITH (
    KAFKA_TOPIC = 'postgres.public.dishes', 
    VALUE_FORMAT = 'AVRO'
);

-- Create restaurants KTable
CREATE TABLE RESTAURANTS (
    restaurant_id VARCHAR PRIMARY KEY
) WITH (
    KAFKA_TOPIC = 'postgres.public.restaurants', 
    VALUE_FORMAT = 'AVRO'
);

-- CREATE orders KStream
CREATE STREAM ORDERSTREAMS (
    rowkey VARCHAR KEY
) WITH (
    KAFKA_TOPIC = 'orders',
    VALUE_FORMAT = 'AVRO'
);

-- Join processing

-- 1. Enrich order with restaurant name
create stream order_with_restaurant as 
    select
        o.RESTAURANT_ID as RESTAURANT_ID,
        r.NAME as NAME,
        o.ORDER_ID as ORDER_ID,
        o.LAT as LAT,
        o.LON as LON,
        o.CREATED_AT as CREATED_AT,
        EXPLODE(o.ORDER_LINES) as ORDER_LINE
    from
        ORDERSTREAMS o
    inner join RESTAURANTS r on
        cast(o.RESTAURANT_ID as STRING) = r.RESTAURANT_ID 
    partition by o.RESTAURANT_ID;

-- 2. Enrich order with restaurant name and dish info
create stream order_with_restaurant_dish as
    select
        owr.RESTAURANT_ID as RESTAURANT_ID,
        owr.NAME as RESTAURANT_NAME,
        owr.ORDER_ID as ORDER_ID,
        owr.LAT as LAT,
        owr.LON as LON,
        owr.CREATED_AT as CREATED_AT,
        d.DISH_ID as DISH_ID,
        d.NAME as DISH_NAME,
        d.price as DISH_PRICE,
        d.type as DISH_TYPE,
        owr.ORDER_LINE -> UNIT as UNIT
    from
        ORDER_WITH_RESTAURANT owr
    inner join DISHES d on
        cast(owr.ORDER_LINE -> DISH_ID as STRING) = d.DISH_ID 
    partition by owr.ORDER_ID;

