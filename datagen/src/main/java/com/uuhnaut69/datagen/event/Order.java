/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.uuhnaut69.datagen.event;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Order extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2556372664522273051L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Order\",\"namespace\":\"com.uuhnaut69.datagen.event\",\"fields\":[{\"name\":\"restaurant_id\",\"type\":\"long\",\"doc\":\"Restaurant's id\"},{\"name\":\"order_id\",\"type\":\"string\",\"doc\":\"Order's id\"},{\"name\":\"lat\",\"type\":\"double\",\"doc\":\"Order's latitude\"},{\"name\":\"lon\",\"type\":\"double\",\"doc\":\"Order's longitude\"},{\"name\":\"created_at\",\"type\":\"long\",\"doc\":\"Created date\",\"logicalType\":\"date\"},{\"name\":\"order_lines\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"OrderLine\",\"fields\":[{\"name\":\"dish_id\",\"type\":\"long\",\"doc\":\"Dish's id\"},{\"name\":\"unit\",\"type\":\"int\",\"doc\":\"Unit\"}]}},\"doc\":\"Order's items\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Order> ENCODER =
      new BinaryMessageEncoder<Order>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Order> DECODER =
      new BinaryMessageDecoder<Order>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Order> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Order> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Order> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Order>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Order to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Order from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Order instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Order fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Restaurant's id */
   private long restaurant_id;
  /** Order's id */
   private java.lang.CharSequence order_id;
  /** Order's latitude */
   private double lat;
  /** Order's longitude */
   private double lon;
  /** Created date */
   private long created_at;
  /** Order's items */
   private java.util.List<com.uuhnaut69.datagen.event.OrderLine> order_lines;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Order() {}

  /**
   * All-args constructor.
   * @param restaurant_id Restaurant's id
   * @param order_id Order's id
   * @param lat Order's latitude
   * @param lon Order's longitude
   * @param created_at Created date
   * @param order_lines Order's items
   */
  public Order(java.lang.Long restaurant_id, java.lang.CharSequence order_id, java.lang.Double lat, java.lang.Double lon, java.lang.Long created_at, java.util.List<com.uuhnaut69.datagen.event.OrderLine> order_lines) {
    this.restaurant_id = restaurant_id;
    this.order_id = order_id;
    this.lat = lat;
    this.lon = lon;
    this.created_at = created_at;
    this.order_lines = order_lines;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return restaurant_id;
    case 1: return order_id;
    case 2: return lat;
    case 3: return lon;
    case 4: return created_at;
    case 5: return order_lines;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: restaurant_id = (java.lang.Long)value$; break;
    case 1: order_id = (java.lang.CharSequence)value$; break;
    case 2: lat = (java.lang.Double)value$; break;
    case 3: lon = (java.lang.Double)value$; break;
    case 4: created_at = (java.lang.Long)value$; break;
    case 5: order_lines = (java.util.List<com.uuhnaut69.datagen.event.OrderLine>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'restaurant_id' field.
   * @return Restaurant's id
   */
  public long getRestaurantId() {
    return restaurant_id;
  }


  /**
   * Sets the value of the 'restaurant_id' field.
   * Restaurant's id
   * @param value the value to set.
   */
  public void setRestaurantId(long value) {
    this.restaurant_id = value;
  }

  /**
   * Gets the value of the 'order_id' field.
   * @return Order's id
   */
  public java.lang.CharSequence getOrderId() {
    return order_id;
  }


  /**
   * Sets the value of the 'order_id' field.
   * Order's id
   * @param value the value to set.
   */
  public void setOrderId(java.lang.CharSequence value) {
    this.order_id = value;
  }

  /**
   * Gets the value of the 'lat' field.
   * @return Order's latitude
   */
  public double getLat() {
    return lat;
  }


  /**
   * Sets the value of the 'lat' field.
   * Order's latitude
   * @param value the value to set.
   */
  public void setLat(double value) {
    this.lat = value;
  }

  /**
   * Gets the value of the 'lon' field.
   * @return Order's longitude
   */
  public double getLon() {
    return lon;
  }


  /**
   * Sets the value of the 'lon' field.
   * Order's longitude
   * @param value the value to set.
   */
  public void setLon(double value) {
    this.lon = value;
  }

  /**
   * Gets the value of the 'created_at' field.
   * @return Created date
   */
  public long getCreatedAt() {
    return created_at;
  }


  /**
   * Sets the value of the 'created_at' field.
   * Created date
   * @param value the value to set.
   */
  public void setCreatedAt(long value) {
    this.created_at = value;
  }

  /**
   * Gets the value of the 'order_lines' field.
   * @return Order's items
   */
  public java.util.List<com.uuhnaut69.datagen.event.OrderLine> getOrderLines() {
    return order_lines;
  }


  /**
   * Sets the value of the 'order_lines' field.
   * Order's items
   * @param value the value to set.
   */
  public void setOrderLines(java.util.List<com.uuhnaut69.datagen.event.OrderLine> value) {
    this.order_lines = value;
  }

  /**
   * Creates a new Order RecordBuilder.
   * @return A new Order RecordBuilder
   */
  public static com.uuhnaut69.datagen.event.Order.Builder newBuilder() {
    return new com.uuhnaut69.datagen.event.Order.Builder();
  }

  /**
   * Creates a new Order RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Order RecordBuilder
   */
  public static com.uuhnaut69.datagen.event.Order.Builder newBuilder(com.uuhnaut69.datagen.event.Order.Builder other) {
    if (other == null) {
      return new com.uuhnaut69.datagen.event.Order.Builder();
    } else {
      return new com.uuhnaut69.datagen.event.Order.Builder(other);
    }
  }

  /**
   * Creates a new Order RecordBuilder by copying an existing Order instance.
   * @param other The existing instance to copy.
   * @return A new Order RecordBuilder
   */
  public static com.uuhnaut69.datagen.event.Order.Builder newBuilder(com.uuhnaut69.datagen.event.Order other) {
    if (other == null) {
      return new com.uuhnaut69.datagen.event.Order.Builder();
    } else {
      return new com.uuhnaut69.datagen.event.Order.Builder(other);
    }
  }

  /**
   * RecordBuilder for Order instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Order>
    implements org.apache.avro.data.RecordBuilder<Order> {

    /** Restaurant's id */
    private long restaurant_id;
    /** Order's id */
    private java.lang.CharSequence order_id;
    /** Order's latitude */
    private double lat;
    /** Order's longitude */
    private double lon;
    /** Created date */
    private long created_at;
    /** Order's items */
    private java.util.List<com.uuhnaut69.datagen.event.OrderLine> order_lines;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.uuhnaut69.datagen.event.Order.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.restaurant_id)) {
        this.restaurant_id = data().deepCopy(fields()[0].schema(), other.restaurant_id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.order_id)) {
        this.order_id = data().deepCopy(fields()[1].schema(), other.order_id);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.lat)) {
        this.lat = data().deepCopy(fields()[2].schema(), other.lat);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.lon)) {
        this.lon = data().deepCopy(fields()[3].schema(), other.lon);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.created_at)) {
        this.created_at = data().deepCopy(fields()[4].schema(), other.created_at);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.order_lines)) {
        this.order_lines = data().deepCopy(fields()[5].schema(), other.order_lines);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing Order instance
     * @param other The existing instance to copy.
     */
    private Builder(com.uuhnaut69.datagen.event.Order other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.restaurant_id)) {
        this.restaurant_id = data().deepCopy(fields()[0].schema(), other.restaurant_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.order_id)) {
        this.order_id = data().deepCopy(fields()[1].schema(), other.order_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.lat)) {
        this.lat = data().deepCopy(fields()[2].schema(), other.lat);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.lon)) {
        this.lon = data().deepCopy(fields()[3].schema(), other.lon);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.created_at)) {
        this.created_at = data().deepCopy(fields()[4].schema(), other.created_at);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.order_lines)) {
        this.order_lines = data().deepCopy(fields()[5].schema(), other.order_lines);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'restaurant_id' field.
      * Restaurant's id
      * @return The value.
      */
    public long getRestaurantId() {
      return restaurant_id;
    }


    /**
      * Sets the value of the 'restaurant_id' field.
      * Restaurant's id
      * @param value The value of 'restaurant_id'.
      * @return This builder.
      */
    public com.uuhnaut69.datagen.event.Order.Builder setRestaurantId(long value) {
      validate(fields()[0], value);
      this.restaurant_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'restaurant_id' field has been set.
      * Restaurant's id
      * @return True if the 'restaurant_id' field has been set, false otherwise.
      */
    public boolean hasRestaurantId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'restaurant_id' field.
      * Restaurant's id
      * @return This builder.
      */
    public com.uuhnaut69.datagen.event.Order.Builder clearRestaurantId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'order_id' field.
      * Order's id
      * @return The value.
      */
    public java.lang.CharSequence getOrderId() {
      return order_id;
    }


    /**
      * Sets the value of the 'order_id' field.
      * Order's id
      * @param value The value of 'order_id'.
      * @return This builder.
      */
    public com.uuhnaut69.datagen.event.Order.Builder setOrderId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.order_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'order_id' field has been set.
      * Order's id
      * @return True if the 'order_id' field has been set, false otherwise.
      */
    public boolean hasOrderId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'order_id' field.
      * Order's id
      * @return This builder.
      */
    public com.uuhnaut69.datagen.event.Order.Builder clearOrderId() {
      order_id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'lat' field.
      * Order's latitude
      * @return The value.
      */
    public double getLat() {
      return lat;
    }


    /**
      * Sets the value of the 'lat' field.
      * Order's latitude
      * @param value The value of 'lat'.
      * @return This builder.
      */
    public com.uuhnaut69.datagen.event.Order.Builder setLat(double value) {
      validate(fields()[2], value);
      this.lat = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'lat' field has been set.
      * Order's latitude
      * @return True if the 'lat' field has been set, false otherwise.
      */
    public boolean hasLat() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'lat' field.
      * Order's latitude
      * @return This builder.
      */
    public com.uuhnaut69.datagen.event.Order.Builder clearLat() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'lon' field.
      * Order's longitude
      * @return The value.
      */
    public double getLon() {
      return lon;
    }


    /**
      * Sets the value of the 'lon' field.
      * Order's longitude
      * @param value The value of 'lon'.
      * @return This builder.
      */
    public com.uuhnaut69.datagen.event.Order.Builder setLon(double value) {
      validate(fields()[3], value);
      this.lon = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'lon' field has been set.
      * Order's longitude
      * @return True if the 'lon' field has been set, false otherwise.
      */
    public boolean hasLon() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'lon' field.
      * Order's longitude
      * @return This builder.
      */
    public com.uuhnaut69.datagen.event.Order.Builder clearLon() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'created_at' field.
      * Created date
      * @return The value.
      */
    public long getCreatedAt() {
      return created_at;
    }


    /**
      * Sets the value of the 'created_at' field.
      * Created date
      * @param value The value of 'created_at'.
      * @return This builder.
      */
    public com.uuhnaut69.datagen.event.Order.Builder setCreatedAt(long value) {
      validate(fields()[4], value);
      this.created_at = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'created_at' field has been set.
      * Created date
      * @return True if the 'created_at' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'created_at' field.
      * Created date
      * @return This builder.
      */
    public com.uuhnaut69.datagen.event.Order.Builder clearCreatedAt() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'order_lines' field.
      * Order's items
      * @return The value.
      */
    public java.util.List<com.uuhnaut69.datagen.event.OrderLine> getOrderLines() {
      return order_lines;
    }


    /**
      * Sets the value of the 'order_lines' field.
      * Order's items
      * @param value The value of 'order_lines'.
      * @return This builder.
      */
    public com.uuhnaut69.datagen.event.Order.Builder setOrderLines(java.util.List<com.uuhnaut69.datagen.event.OrderLine> value) {
      validate(fields()[5], value);
      this.order_lines = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'order_lines' field has been set.
      * Order's items
      * @return True if the 'order_lines' field has been set, false otherwise.
      */
    public boolean hasOrderLines() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'order_lines' field.
      * Order's items
      * @return This builder.
      */
    public com.uuhnaut69.datagen.event.Order.Builder clearOrderLines() {
      order_lines = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Order build() {
      try {
        Order record = new Order();
        record.restaurant_id = fieldSetFlags()[0] ? this.restaurant_id : (java.lang.Long) defaultValue(fields()[0]);
        record.order_id = fieldSetFlags()[1] ? this.order_id : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.lat = fieldSetFlags()[2] ? this.lat : (java.lang.Double) defaultValue(fields()[2]);
        record.lon = fieldSetFlags()[3] ? this.lon : (java.lang.Double) defaultValue(fields()[3]);
        record.created_at = fieldSetFlags()[4] ? this.created_at : (java.lang.Long) defaultValue(fields()[4]);
        record.order_lines = fieldSetFlags()[5] ? this.order_lines : (java.util.List<com.uuhnaut69.datagen.event.OrderLine>) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Order>
    WRITER$ = (org.apache.avro.io.DatumWriter<Order>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Order>
    READER$ = (org.apache.avro.io.DatumReader<Order>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.restaurant_id);

    out.writeString(this.order_id);

    out.writeDouble(this.lat);

    out.writeDouble(this.lon);

    out.writeLong(this.created_at);

    long size0 = this.order_lines.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (com.uuhnaut69.datagen.event.OrderLine e0: this.order_lines) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.restaurant_id = in.readLong();

      this.order_id = in.readString(this.order_id instanceof Utf8 ? (Utf8)this.order_id : null);

      this.lat = in.readDouble();

      this.lon = in.readDouble();

      this.created_at = in.readLong();

      long size0 = in.readArrayStart();
      java.util.List<com.uuhnaut69.datagen.event.OrderLine> a0 = this.order_lines;
      if (a0 == null) {
        a0 = new SpecificData.Array<com.uuhnaut69.datagen.event.OrderLine>((int)size0, SCHEMA$.getField("order_lines").schema());
        this.order_lines = a0;
      } else a0.clear();
      SpecificData.Array<com.uuhnaut69.datagen.event.OrderLine> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.uuhnaut69.datagen.event.OrderLine>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          com.uuhnaut69.datagen.event.OrderLine e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new com.uuhnaut69.datagen.event.OrderLine();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.restaurant_id = in.readLong();
          break;

        case 1:
          this.order_id = in.readString(this.order_id instanceof Utf8 ? (Utf8)this.order_id : null);
          break;

        case 2:
          this.lat = in.readDouble();
          break;

        case 3:
          this.lon = in.readDouble();
          break;

        case 4:
          this.created_at = in.readLong();
          break;

        case 5:
          long size0 = in.readArrayStart();
          java.util.List<com.uuhnaut69.datagen.event.OrderLine> a0 = this.order_lines;
          if (a0 == null) {
            a0 = new SpecificData.Array<com.uuhnaut69.datagen.event.OrderLine>((int)size0, SCHEMA$.getField("order_lines").schema());
            this.order_lines = a0;
          } else a0.clear();
          SpecificData.Array<com.uuhnaut69.datagen.event.OrderLine> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.uuhnaut69.datagen.event.OrderLine>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              com.uuhnaut69.datagen.event.OrderLine e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new com.uuhnaut69.datagen.event.OrderLine();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










